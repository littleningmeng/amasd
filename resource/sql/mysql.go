// Code generated by go-bindata.
// sources:
// scrapyd_admin.sql
// DO NOT EDIT!

package sql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scrapyd_adminSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x72\xd3\x48\x16\xbe\xf7\x53\xf4\x9d\x13\xca\x59\x2c\x39\xce\x6f\xa5\x6a\x4d\x30\xe0\x22\x71\x58\xdb\xcc\x2e\x57\x8e\x22\x75\x12\x81\x22\xb9\x24\x99\x21\x55\x5c\x38\xb0\x80\x93\x21\x3f\x03\x84\x90\x21\x40\x52\xcb\x90\xd4\x0e\x9b\xc0\x64\x2a\x84\x38\xb0\x2f\xe3\x96\x9d\xab\x79\x85\x2d\xa9\x25\x59\x8e\x25\xff\x48\xa6\x98\x2d\x26\x90\x8a\xac\x96\xce\xd7\xa7\xcf\x77\x4e\x77\x9f\xd3\x3e\x7b\xc6\x07\xe2\xd4\x4d\x96\xa6\x64\x30\x3a\x9b\xfc\xdb\x08\x38\x4f\xc9\x14\x48\x89\x14\x2f\x4d\x42\xd1\xe7\x03\x49\x21\x2b\xd2\x10\x24\xa1\x78\x13\x8a\xc0\xf8\x19\x00\xca\xc6\x5b\x65\xe3\xe8\x74\x7b\x6a\x36\x03\x71\xbb\x26\xed\x74\xf3\x77\x50\x94\x58\x81\x07\x03\x20\x1c\xec\x09\xf5\x99\xcd\x97\x04\x49\x06\xc0\x22\x9d\x13\x68\x8a\x9b\x16\x24\x79\x20\x14\x0a\xf6\x54\xc4\xd0\xd3\x70\x86\xb2\x3c\x27\x65\x58\x06\x8a\x52\x9a\x62\x66\x58\xde\xe7\x03\x29\x4a\x9c\x82\xb2\x63\x6f\xaa\x9b\x6b\x7a\x73\x81\xe5\x20\x88\xf2\xb4\xc0\xb0\xfc\x94\x05\xa5\x27\x1c\x0c\x12\x3e\x9f\x3a\x36\x70\x00\x90\xbd\x67\x83\x3d\x67\xc9\x20\xd1\x0f\x88\xfe\x81\xee\xe0\x40\xa8\xdb\x77\xe6\xac\xcf\x97\x8c\xa6\x40\x3c\x32\x1a\x4d\x82\xac\x3c\xd9\x37\x33\xd1\x3d\xa8\xdd\xba\x30\x96\x88\xc6\x2e\xc6\xd3\x97\xa3\xd7\xd2\xc3\x97\xa2\xc3\x97\x93\x60\x08\x04\x07\x7d\xbe\xae\x2e\xd0\x55\xe7\x47\x6d\x4f\x51\x13\x1c\x04\x92\x2c\x66\x69\x39\x2b\x42\x30\x29\x88\x00\xab\xda\xe8\xe5\xf3\x89\xb1\x2b\x20\x15\x39\x37\x12\x05\xb1\x0b\x20\xfa\x8f\x58\x32\x95\x04\xe3\xda\xbb\xe3\x83\xbe\xe1\x44\x34\x92\x8a\xea\xed\xfa\x5d\xd0\xe1\x03\x60\x9c\x65\xc6\x01\xcb\xcb\x1d\x04\xd1\x09\xb2\xbc\xc4\x4e\xf1\x90\x01\xf1\xb1\x14\x88\x5f\x1d\x19\x01\x91\xab\xa9\xb1\x74\x2c\x3e\x9c\x88\x8e\x46\xe3\xa9\x80\xfa\x42\x86\x92\xa4\xef\x05\x91\x19\x07\x37\x29\x91\x9e\xa6\xc4\x0e\x22\x18\xec\x04\xc3\x97\x22\x89\xc8\x70\x2a\x9a\x00\xea\x18\xa8\x03\x52\x91\x72\x3e\x7a\x21\x72\x75\x24\x05\xfc\x7e\x30\x3c\x36\xaa\x4a\x02\x7e\xb4\x77\xbf\xb4\x39\xe7\xd7\x44\x8a\x90\xe2\xd2\x3c\x35\x03\x3d\xca\x2c\x6d\xbc\x42\xbb\x2f\xd1\xf6\x63\xb4\xb2\x88\x25\xc3\x19\x8a\xe5\x3c\x4a\x3d\xb9\xb3\x5b\xda\x7d\x8f\xe5\x49\x32\x25\x67\x25\xab\xc0\xce\x06\x5d\xda\xdd\x2a\xad\xdc\x47\x3f\x3e\x2b\x2d\x1c\x28\xb9\x39\x00\x20\xaf\x9a\x98\x01\xb7\x01\xc3\x4a\xda\x25\x96\x4c\x8b\x90\x92\x61\x5a\x66\xd5\x51\x30\x0c\x52\x2b\x3a\x68\x1d\xc2\xfc\x73\x54\x38\x52\xd6\x0e\x4e\xd6\x7e\xd3\x84\x5c\x49\xc4\x46\x23\x89\x6b\xe0\x72\xf4\x1a\xe8\x50\x2d\xdb\xe9\xeb\x04\xd1\xf8\xc5\x58\x3c\x3a\x14\xe3\x79\xe1\xfc\xb9\x53\x06\x1d\x22\x4d\xc9\xea\xa8\x24\xa3\xa9\x21\x9d\xca\x20\x31\xf6\xf7\xf4\x85\xb1\xc4\x68\x24\x35\x74\xfe\x5a\x3c\x32\x1a\x1b\x36\x80\x87\x2a\x4a\x95\xb7\x76\xfc\xcd\x11\x3b\x01\x69\x41\x64\x24\x20\x4c\x36\xc9\xe7\x73\xd1\x8b\xb1\xf8\xa0\x2f\x16\x4f\x46\x13\x29\x10\x8b\xa7\xc6\x4c\xde\x7e\x17\x19\xb9\x1a\x4d\x82\x0e\x22\x00\xfc\xfd\x3d\xb0\xb7\x9f\x24\xfa\xfa\x7b\xc2\x70\xa2\x97\xa4\xfb\x49\x2a\xdc\xdd\xcf\x30\x61\x2a\x14\x0a\x12\x04\xe9\x0f\x58\x6c\xa0\x7e\x20\xfe\x4a\xf4\x84\xfe\x42\x0b\x33\xea\x07\xdd\x18\xfe\x00\x20\xc2\x04\x11\xee\x23\x49\x32\xdc\x39\xe8\x53\x15\x8d\xa5\x3c\x7a\x6c\x9a\xa2\x69\x28\x49\x5e\x1c\x57\x17\x61\xef\xbf\x46\xa3\x4b\x37\x16\x05\x0e\xa6\xad\x6f\xd5\xe7\x5a\x79\xfb\x51\x79\xfe\x57\x56\x27\x2b\x95\xc9\x54\x7c\x20\xec\xc2\xa7\x94\x9d\x2d\xf4\x62\x0d\xad\x2c\x96\xb6\xdf\xfd\x7e\x9c\x57\x9e\x3e\x28\x16\x0e\xd0\xeb\x8f\xc6\x9d\x79\xdd\x29\x04\x5e\x16\x05\x8e\x83\xa2\x47\xb8\xa5\x6d\x94\x3f\x40\xeb\x3b\x58\xbe\xae\x04\x2d\xb3\x02\xef\x51\xf0\xd3\x8f\xca\xfe\xaa\x55\xaa\x11\x21\x64\x96\x9f\x55\x87\xb6\xdb\x6e\x64\x09\xab\x88\x67\x7b\x68\xe5\x8d\xb2\x31\xaf\xac\xe6\x01\x01\xf4\x8b\x2e\x02\x28\x6b\x9b\xca\x6a\xde\xc1\xb1\xd5\xbb\xea\xa7\x8a\x1d\x3b\xcc\xcb\x5a\xaf\x77\x72\xf2\x8a\x47\xef\x17\x4a\x85\x57\xd8\xc8\xca\x8b\xbb\x27\xeb\x2b\xcd\xbb\xb6\xb3\x07\xa8\x1d\xf2\xc4\x7f\x55\x80\x03\xfb\xb5\xa6\x53\xdc\x0f\x36\xc9\x7d\x2c\xa1\xbe\xcb\xd8\x7a\x01\x1e\xa6\xd2\x93\x1d\x25\xff\xc1\xf0\x85\x1a\x47\x6a\x52\x56\x95\x47\x7d\xa1\xc8\x3d\x3c\x36\x7a\x25\x32\x9c\x3a\x6d\x67\xac\x00\xee\x00\xda\xfb\x88\x8e\x9e\xb8\x0f\xe4\xcd\x19\xd9\x31\x9a\xeb\x76\xb4\x84\x74\xf5\x7f\x1b\x62\x70\x46\x14\xae\x43\x5a\x76\x49\x3f\xfd\xed\x1a\xee\x19\xf7\x5d\x06\xdd\xea\x35\x4e\xb8\xd1\xe2\xe1\x64\xeb\x63\xe9\xf9\xae\x35\xba\x70\x94\x24\xa7\x6f\xe2\x65\x6c\xcb\x82\x94\x8d\x1c\x5a\x59\x2a\xcd\xe7\x95\x8d\xb7\x68\xf9\x83\xd3\xba\xc3\xd6\x8b\x6c\x29\xac\x7c\x28\xa0\x85\x4d\xcb\x02\x64\x3c\x9b\x61\xdc\x4b\x7b\xfe\x9b\xf2\xf4\x5d\x6b\xcb\x99\x86\x81\x0d\x6b\xee\x2d\x98\xe9\x46\x4f\x4f\xb3\x92\x2c\x88\xb3\xde\x28\x65\x48\x71\xa2\x96\xd9\xee\x76\x79\xae\x8b\x71\x11\x91\xf0\x58\x19\x71\xcd\x2d\xcb\x30\xbf\xbe\x00\xb9\xda\x47\x07\xb4\x74\x1f\x2d\xff\x5a\xde\x7d\x87\x3e\xad\xb6\x95\x1a\x69\x49\xdb\x68\xb6\x87\x21\xba\xb0\x46\x44\x31\x1e\xfb\xda\x7c\x31\xba\xe3\x42\x90\xd5\x1e\x86\x38\xac\x55\xba\xfe\xdc\x6e\x4f\x9c\x8d\x45\xb4\xb0\x85\xd6\x77\x4e\x89\x9a\x16\x24\xd9\x81\xcd\xb5\xef\xa2\x8d\x77\xe8\x45\xee\xff\x86\xc5\xca\x7c\x4e\x0f\x9f\x86\x02\xed\xe1\x75\x5b\xf8\xdc\x80\xc7\x7f\x10\xfe\x9e\x26\x5c\xf3\x72\x6a\x08\xf7\x4d\xcc\xa9\xc5\xc3\xa5\x8a\xb7\xdc\xdb\x2f\xcf\x3d\x41\xf7\xf6\x4b\xfb\x05\x6f\xc4\x93\xe8\x69\xc8\x64\x39\x28\xa5\x65\x4a\xba\xe1\x92\x78\xd5\x42\x6a\x88\x77\xaa\xf9\x6b\x13\xcf\x10\xe4\x79\x71\xe8\x6d\xc6\x36\x57\x84\x6d\x74\x84\xea\x90\xab\x65\xdf\xea\x6f\xa7\xed\xc2\x2f\x4e\xf9\xba\xda\xae\xe5\xdf\x96\xd7\x7f\x31\x1d\x1c\xcb\xb1\xc9\x33\xd6\xcf\xe0\x69\x42\xac\xe3\x4c\x8b\x8d\x07\xb9\x6a\x7a\xdb\xfd\x49\x59\x3b\x40\x2b\x7b\x68\x61\x07\xbb\x22\x38\x63\xfe\x43\xcb\x77\xca\xb9\xbb\x1c\xcb\x67\x6f\xe1\xe7\x8a\x85\x02\x5a\xd8\xb2\x4f\x37\x92\x0d\x3b\x8b\xb3\x8c\x0e\x49\xc6\x76\x38\x3f\x1e\x0e\xdc\x49\x7d\x06\xda\xda\xf9\xfd\xf8\x61\xf1\xb0\x50\x7e\x33\x77\xf2\x28\xaf\x6e\x28\xad\x8a\x78\x88\x05\x5e\x26\x1f\x87\x49\xc7\xdb\x64\x43\x71\x2c\x25\xb5\xe0\x5f\x28\xff\x8b\x99\x8a\x6e\x8b\x2f\x64\x25\x28\xb6\x18\x27\x4c\x39\x78\xd7\x6f\xf6\xa7\x36\x8f\xdf\xbc\x28\x6b\xf2\x9e\xca\xca\xd3\x95\x74\x17\x61\xbb\xaa\xd2\x52\x5c\xe8\x38\x87\x56\xf6\x70\x76\xe9\xe4\xdf\x0f\xcb\x7b\x73\x80\x18\x2a\x1e\x2e\xe2\xfb\x80\x04\xf8\xc2\x3e\x8d\x66\x9b\xa0\x24\x6c\xd5\xc4\x2e\x40\x0c\x29\xff\xf9\x17\x3a\x3c\x04\xe4\x90\xb2\x7a\xef\xe4\xa7\x8d\x6f\x62\x6a\x36\x47\xc1\x8b\xdb\x69\x71\xd2\xad\xdb\x69\x2f\xd7\xba\x1d\xbe\xfd\xb5\xa7\x5a\xef\xb1\xbf\xf5\x39\x56\x99\xcf\xa1\xf7\x2f\xed\x67\xda\x5a\x92\xd7\x51\x8b\xa8\xe9\x98\x41\x75\x30\x04\x4c\xb2\xa3\xa3\x57\xe8\xf8\xee\x1f\x74\xe3\x82\xbb\xed\x71\x85\x38\x2b\xc9\x70\x26\x3d\x03\xf9\xac\x5b\x8e\x56\x24\xd4\x12\xd5\xd2\xd6\xb6\x24\x5f\x6d\x55\x01\x8f\xca\xc8\x88\x8a\xac\x7f\x4e\x67\x79\x96\x16\x18\x98\xa6\xd9\xfa\x84\x2a\x2f\x6f\xa0\xc5\xaa\x9a\x43\x86\x12\x21\x2f\xb7\x50\xcd\x29\xe5\x0f\xb0\x94\xaa\x82\xce\x17\xea\xaf\x8b\x5a\xcf\x97\xea\x49\xbd\x32\xd0\x97\xc2\xac\xa9\x10\x65\x45\xce\x4a\x8f\xb6\x23\xa2\xd7\x4f\x4f\xee\xee\x9c\x3c\xfe\xac\x2c\xfd\x9c\x15\x39\x93\x22\xd4\x0c\x94\xad\x85\x34\xb2\xfd\xd0\x27\xeb\xff\x44\x0b\x9b\x68\xf9\x8e\xb2\xaa\x2b\xcb\xd2\xd6\x60\x49\x06\xdb\x8f\xa9\xbb\xc3\xf3\xcf\xca\xe6\x03\x9a\xa3\x24\x09\x03\xcb\xb3\x19\xd8\xc2\xf2\x01\x4b\x01\x04\x40\xf7\xef\x99\xa3\xa7\xae\x49\x2c\x83\xe9\x76\x65\xa2\xad\x7e\x8a\x9f\x36\x8a\x87\x47\x18\x46\x79\xf6\xb9\xf4\xfa\x08\x10\x40\xbf\x20\x41\xf1\x70\x11\x5f\xeb\x69\x7e\x56\x92\x59\x7e\x2a\x2d\x88\xda\xac\xd9\x6a\x65\x09\x83\x2c\x3d\x42\x47\xcb\x28\x77\xdc\xa8\x82\xc8\x69\x89\x3b\x3c\x3d\x9f\x42\xae\x3c\x84\x43\x0c\xae\x33\x56\xc2\x4d\xe0\xf4\xf3\xe0\x6a\x32\x16\xbf\x08\xce\xa5\x12\xd1\x68\xc3\x0a\x56\x9f\x87\x12\x16\xd6\xd1\x55\xd9\xaa\x95\x09\xc4\xae\x6e\x55\x35\x45\x58\xcf\x22\xe8\xc5\x35\xed\xb4\x81\x3f\x00\x82\x01\xe0\xc7\xcf\xfa\x1d\xae\x2c\xbf\xb8\xf0\x15\xea\x6c\x06\x8b\x54\xb1\xb4\xc5\xbc\x89\x45\x54\xc9\xd5\x2a\x6b\xea\x05\xcb\x33\xf0\x96\x15\x69\x92\x02\x93\x54\x97\xba\x8b\xc0\x1d\x24\x02\x20\xd8\x14\x66\x28\x60\x54\x2c\x1d\x30\x45\x81\x83\x0d\x20\xbb\x38\x81\xbe\x81\x71\xc9\x66\x71\xbb\x03\x06\x9f\x1d\x70\xd5\xc7\xeb\xe0\xaa\xfc\xec\x12\xb8\x16\x51\xc3\x01\x63\x01\x84\x75\xf6\x07\x40\xc8\x56\x5b\x8a\x61\x6a\x0d\xd9\x34\x4c\x8f\x6a\xc8\xe3\xa7\xe5\xcf\x3f\x36\x80\x81\x0c\x2b\x7b\xc0\xe9\x55\x07\x71\xf7\x73\xe9\xd3\xae\x6e\x42\x6d\xdd\xe8\x88\x96\xe5\x71\xfe\xc0\xf8\xec\x12\xb5\x2f\xa0\x6e\x80\x37\x4f\xd6\x5f\x37\xd0\x8e\x81\x1c\x94\xbd\x20\xf5\x57\xcc\xa5\x51\xc5\x1f\x00\xdd\xb6\x24\xf1\x66\x2e\x22\x58\xb1\x57\x7d\x1c\x8f\xf6\x22\x88\x8a\xc1\x30\xf7\x0d\x83\xd9\xc3\x65\x79\x69\x5a\xf8\xde\x0b\x20\x59\xb1\x55\x7d\xcd\x3c\xdb\x8a\x08\x05\xaa\x67\x28\x47\x28\x49\x10\x3d\x0d\xa2\x2a\x15\x6f\xbb\xf4\x60\xac\x6f\x23\xfd\x8e\x97\x96\xdf\x56\x62\x23\xa1\x86\x0b\xbc\xb5\x31\xc2\xbe\xb6\xdd\xf5\x3b\x5c\xb9\x85\x51\xc3\x85\x91\x1d\xd4\x60\xae\x0b\x13\x92\xdf\xe6\xaf\x5b\x80\x5e\x13\x00\xe5\xd7\xd4\xb9\x35\x00\x34\x50\x99\x92\xd4\xb8\x6d\xfe\xad\x13\x6b\x5b\x85\xec\xd3\x98\xbe\x85\xf2\x8f\x4c\xcd\x6c\x21\xcd\x9c\xbd\x43\x88\xa7\xb8\x96\xa1\xfb\x4d\x7e\x54\xa6\x96\x6e\x47\x6e\x38\xe8\x3c\x21\xdc\x6a\x11\x97\x0c\x9a\xd1\xca\x64\x67\x1d\xdc\x53\x21\xcb\x44\xed\x12\x32\x90\x6f\x15\x9a\x30\x89\x5a\x51\x39\xec\xc0\x52\x27\x85\xb3\x53\xad\xa2\xaa\xc1\xa5\x92\x98\xd2\x3d\x44\xcb\xc3\xfa\x1d\xae\xaa\x20\x55\x54\xb3\xa9\x25\xe0\x90\x15\xd8\xd4\x58\xeb\x8f\x1d\xaa\x83\xc6\xee\xb0\xbb\x4d\x2b\x5b\x55\x77\xc4\xb6\x35\xf3\xa4\xc0\x31\x50\xec\xca\x70\x59\xa9\x55\xf8\xca\x0a\xc6\x0c\x4c\x8e\x96\xae\x9d\x15\x5b\x59\x2b\x91\x3d\x26\x94\x0a\xd2\x6b\xe3\xbc\x1e\x01\x7a\xab\x00\xfa\xec\x01\x92\x76\x01\xa2\x0a\xc9\xeb\x89\x32\xbd\x73\x1e\x0e\x35\x5a\x24\x38\x25\x9e\xec\x8e\x35\xb6\x33\xf1\xd4\x60\x2f\x8d\x8f\x04\xd6\x4f\x2d\x35\x5d\x7c\x3b\xa8\x3e\x34\xdc\xf2\xc6\xd9\xba\x58\x05\x04\x5a\xd9\x2b\x3d\xd9\x01\x24\x28\xbd\x99\x2b\x3d\xd9\xd1\x93\x46\x14\x9f\x66\x20\xd7\xf2\x6e\x1c\x2d\xef\x15\x0b\x3f\xe3\x15\x8f\xba\xe9\xd7\x3e\xe2\x7d\x38\xbe\x36\xbe\x98\x30\x43\x89\x37\x1a\x7e\x7f\xc0\x53\xfa\x02\x0f\xf9\xeb\x07\xca\xbe\xa1\x53\x2b\xdf\x01\x70\x93\xa6\x6d\xe3\x49\x52\xdc\x7b\x2f\xdb\x70\xd7\xc7\x47\xab\x1c\xc6\xba\x0d\x2f\x1f\xdc\x2b\x1d\x6d\x5b\x0f\xfd\x07\x8d\x95\xa3\x5f\x3f\xe9\x1f\x22\x43\x41\xb2\x1d\x31\xc1\xc3\x21\x05\xdb\xa3\x09\x5e\x0e\x24\xd4\x64\xbc\x9a\xac\x25\xe0\x85\x57\xe9\x7d\x01\xbd\xfc\x41\xab\xc8\xe5\x94\xb7\x5b\x4a\x6e\x1b\x90\x43\xb5\x15\xe9\x3f\x4f\x3d\x7c\xab\xa7\x1e\xae\x0b\x13\x5a\x6f\x9a\x1e\x66\x4c\x1b\x96\x01\xc5\xc3\x25\x89\x16\xa9\xcc\x6c\xf1\x30\x57\x3c\xcc\xe1\x13\xe7\xe6\x9c\x20\xca\xee\x0a\x54\xe8\x38\x87\xb6\x7f\xb0\x56\x63\x21\xcf\xb8\x13\x55\x2a\x3c\x56\x5e\xbc\xb2\x8a\x6a\xee\xe0\x45\x06\xf2\x0c\xcb\x4f\x59\xa3\xf9\x7f\x57\xca\x5b\x0f\x8d\x53\x18\xa2\x28\x88\xe0\x36\xd0\x1f\x03\xb7\x81\x98\xe5\x79\x7c\x45\x53\x3c\x0d\x39\x7c\x46\x63\x92\xe5\x59\x69\xfa\x2b\x9f\xd1\x70\xfc\xe6\x22\x31\xe8\xfb\x5f\x00\x00\x00\xff\xff\x3a\xb5\x01\x4f\x35\x3a\x00\x00")

func scrapyd_adminSqlBytes() ([]byte, error) {
	return bindataRead(
		_scrapyd_adminSql,
		"scrapyd_admin.sql",
	)
}

func scrapyd_adminSql() (*asset, error) {
	bytes, err := scrapyd_adminSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scrapyd_admin.sql", size: 14901, mode: os.FileMode(420), modTime: time.Unix(1561635634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scrapyd_admin.sql": scrapyd_adminSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scrapyd_admin.sql": &bintree{scrapyd_adminSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

