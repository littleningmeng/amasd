// Code generated by go-bindata.
// sources:
// sa.sql
// DO NOT EDIT!

package sql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _saSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\xdf\x6a\xe3\x46\x14\xc6\xef\xf3\x14\x87\xdc\xc8\x06\xa5\x48\x76\xec\x24\x84\x42\xb5\xa9\x9a\x9a\xda\xca\xa2\x28\x0b\xb9\x32\x13\x69\x9c\x28\x91\x25\x31\x23\x6f\x37\x0f\xd0\x12\x16\x96\x76\x4b\xff\x2d\x5d\x68\x7d\xd5\x40\x4b\x6e\x0a\x5d\x5a\x97\x3e\x4d\x1d\xbb\x6f\x51\xc6\xb2\x25\x39\x1e\x6d\xc6\xd4\x5d\xb5\x50\x48\xb0\x12\x1f\x8d\x7f\xe7\x9b\xef\x9c\xd1\x8c\x1f\x9a\xda\x7e\x4b\x83\x4e\x40\xb0\x7b\xea\xb7\x2f\xf0\x25\x85\xb7\x21\xe8\x74\x76\xd7\x1e\xe8\xfb\x0d\x03\x2c\x53\x33\x0e\xb5\x3d\xab\x71\x60\xec\xae\xed\x99\xba\x66\xe9\x60\x69\x0f\x9a\x3a\x20\xdb\xc6\x94\x42\xc9\x75\xa0\x61\x58\xfa\xbe\x6e\xc2\x43\xb3\xd1\xd2\xcc\x63\xf8\x40\x3f\x06\xed\xc8\x3a\x68\x18\x7b\xa6\xde\xd2\x0d\x4b\x06\x12\x78\xb8\x9d\x09\x35\x0e\x2c\x30\x8e\x9a\x4d\x78\x57\x7f\x4f\x3b\x6a\x5a\x50\x52\xca\x32\xa0\x30\x84\x47\x9a\xb9\xf7\xbe\x66\x42\xa9\xa6\x94\x17\xc3\xd6\xd7\x65\xb0\x03\x3f\x22\x81\xe7\x61\x22\x10\xbc\x8e\xec\xc8\x0d\xfc\x75\x81\x50\x1a\xa1\xa8\x47\xc1\x6a\x18\xc7\x0d\xc3\x82\x92\xca\x89\x2b\xa9\xe5\xf2\x5d\x21\x9c\xae\xeb\x8b\xea\xd0\xa3\x98\xf8\xa8\x8b\x05\x70\x42\x44\xe9\x87\x01\x71\xd2\x50\x55\xc9\x8b\xc5\x5d\xe4\x7a\x22\x81\x8e\x4b\x43\x0f\x5d\xb6\x05\x19\xa6\x92\x64\x06\x2e\x67\xde\x4f\xee\x91\xc1\x26\x18\x45\xb8\x1d\xb9\x5d\x0c\xb1\x78\x99\xc8\x52\x66\xf8\xf2\xee\x5a\xc3\x38\xd4\x4d\x8b\x85\x1d\xa4\xe2\xa5\xd2\xa4\x99\x4f\xf3\x9a\xa7\x9e\x41\xcd\x7d\x66\x19\x1e\x69\xcd\x23\xfd\x10\x4a\xaa\x0c\xd2\x64\x50\x49\x06\xa9\xa2\x56\xaa\x95\x4e\x65\x67\x0b\xd5\xb6\x50\x0d\x6d\x6d\x56\xb7\x77\x36\x91\x82\x37\xd1\xb6\xa2\x76\xec\xaa\x34\x0b\x7e\x47\xad\x57\xdf\xb2\x83\x2e\xfb\xc7\xe8\xa6\x3f\xfa\xf4\xe3\xe1\xf3\xaf\xd9\x1f\xd8\x47\x27\x1e\x76\x24\x19\xd4\x5a\xbd\x52\x55\xea\x75\x45\xe5\x1a\xa0\xcd\x1c\x2e\xea\x82\xf8\x8e\x7b\xcb\x41\xa4\x68\x78\x7a\x26\x2c\xe9\x27\x25\x83\xcd\x29\xc5\x7e\xee\x66\xd3\xc5\x7e\x4f\x34\x0f\x61\x27\x13\xec\x47\xff\xf6\xf2\x0f\x11\x41\x5d\x1c\x65\x87\xad\xe4\xd6\x91\x6b\x07\xfe\xea\x5a\x8a\x0c\x9e\x4b\x23\xd7\x3f\x6d\x07\xc4\xc1\x04\x0e\x5b\x5a\xb3\x39\xb9\xa1\xc6\xbb\x61\x61\xd6\x67\x73\x16\xcf\x48\x46\xf0\x89\xa6\x59\xc9\x52\x45\x32\x09\xc7\xe9\xa4\x85\x35\x07\x33\x5f\x5a\xa3\x9f\x06\xa3\xc1\xb7\x71\x89\x48\x32\x28\x32\x48\xf4\x92\x46\x78\x52\x39\xbc\xab\xe9\xaf\x2a\x43\xb5\x10\xe8\x0a\x83\xfe\xfc\xfa\xf6\xea\x55\x02\xad\xce\x01\x26\xcd\xc2\xf5\x1d\xfc\x64\x86\xdc\x41\xd0\x41\x1b\xac\x25\xc5\x37\x28\x85\xc0\x57\x65\x90\xc6\x9f\xbc\x1c\x3e\xfb\x22\x07\x9e\x61\xe4\xb0\xb3\x21\x37\x02\x4f\x92\xa1\x52\x14\xfe\xa6\x0c\xd2\xed\xab\xc1\xf0\xe9\x77\x71\x12\x92\x0c\x55\x2e\x3e\x72\x9c\x8c\x57\x0a\xe3\xad\x31\xaf\xfc\xf6\xe5\xf8\xf7\xe7\xff\x0d\xde\xba\x0c\xd2\x9f\xfd\x5f\x46\xdf\xdc\x4c\x4b\x31\x24\xc1\x39\xb6\x23\x29\xf7\x32\xad\xc6\x62\x88\xb7\x12\xe2\xc4\xd0\xf5\x5c\x58\x8e\xa9\x4f\x82\x27\x45\xe2\x6f\xcb\x20\x41\xec\xe8\x44\xf7\x7c\xfe\x8c\x4b\x12\xfa\x8d\x20\xc4\x7e\x91\x29\xec\x30\x8f\x5f\xfd\x38\x7e\xf1\xc3\xac\x7d\x87\xae\x33\xe9\x72\xdc\xab\xa2\x0d\xa3\x2a\x09\x6f\xe2\x98\x9d\x1c\x56\x9e\x5f\x7a\xa7\x85\xd2\xb3\xd5\xe7\x8f\xc1\x60\xf8\xb4\x3f\x55\xfb\x3c\x38\xa1\x12\xe7\xb5\x70\x9d\xab\x09\xe9\xf0\xea\xab\x71\xff\x9a\xc1\x30\xfa\x08\xd1\x0b\x29\xf3\x9a\xb3\xd2\x14\xca\xce\xd6\x99\xf1\x4d\x7f\x78\xf5\x59\xa2\x35\x97\x9d\xda\x67\xd8\xe9\x79\x98\x72\x56\x4a\xe4\x15\x9b\x03\x5b\x7b\x6e\x5f\x3e\x63\xfa\xbf\xb8\x9e\x95\x26\x26\x8f\xa7\x26\xe7\x5c\x15\x6e\x99\x7a\x16\x39\x7d\x40\xa9\xe5\xf0\x72\x9c\x93\xbc\x59\x5c\x12\x5b\xc9\x33\x4a\x56\xfd\xdc\x24\x16\x7a\x7a\x27\xf0\x1c\x4c\x36\x42\xaf\x47\xd3\x3c\xe6\x36\x54\xd3\x15\x61\xc5\x7b\x2a\x0f\xd1\xa8\xfd\x18\x13\xea\x0a\x6d\x44\xb8\xfb\x73\xfe\x2e\xac\x17\x3a\x62\xa1\x39\x89\xb6\xcf\x5c\x1a\x05\xe4\x52\x34\xe1\xd9\x6d\xf7\x6e\x0f\xff\x81\x6c\xf3\x52\x88\x27\x7c\xe5\x19\xc4\xc3\xde\x1f\xf7\x26\x66\x6b\x99\xf3\x8a\x15\xef\xf3\x85\x77\xc5\x04\x77\x11\xb9\x10\x39\xd7\x5a\x66\xc6\xb3\x5d\x26\x3d\x29\x59\xe8\x32\xb3\xce\x11\x43\xbc\xe6\xb8\x69\xfc\xf3\x47\xa3\x5f\xbf\xcf\x1e\x1b\x29\xf1\x3e\x4d\xe2\x74\x83\x64\x0d\x6a\xb3\x55\x69\xe5\x0e\x9b\x05\x0a\xce\x98\x78\x49\x89\x5a\xf7\x2c\xa0\x91\xc8\x70\x93\xa7\x36\x01\xab\xc4\x71\xf3\xe9\xbc\xce\x06\xcb\x1c\xcb\x64\xce\x79\xb8\x81\x0b\x73\xb7\x54\x57\x40\x9e\x8b\xa8\x00\x8c\xa0\x62\x7f\xe7\xe4\x98\x1b\x85\x7a\xd1\x99\x40\x0d\x0a\x17\xeb\x9b\x68\x5a\xb1\x1d\x56\x5e\x35\xa2\xf6\x5a\xa2\x5c\x56\xae\xda\x5d\x29\x96\x69\x1f\xd1\x65\x88\x05\x58\xfe\xef\x32\x62\x36\x38\x0f\x4e\xd8\x98\x42\x2e\x20\x91\x50\x45\x60\xdf\x11\x8a\x5b\xa2\x73\x1d\xb4\x5a\x0d\x6b\xfe\x0b\xbc\x9c\xaf\xfb\xfc\xdd\xbf\x02\x00\x00\xff\xff\x9b\x5e\x87\xad\x08\x1c\x00\x00")

func saSqlBytes() ([]byte, error) {
	return bindataRead(
		_saSql,
		"sa.sql",
	)
}

func saSql() (*asset, error) {
	bytes, err := saSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sa.sql", size: 7176, mode: os.FileMode(420), modTime: time.Unix(1564027461, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sa.sql": saSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sa.sql": &bintree{saSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

