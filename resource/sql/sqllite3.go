// Code generated by go-bindata.
// sources:
// sa.sql
// DO NOT EDIT!

package sql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _saSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\xdd\x6a\xe3\x46\x14\xc7\xef\xf3\x14\x87\xdc\xc8\x06\xa5\x48\x76\x6c\x6f\x08\x85\x6a\x5d\x35\x15\xb5\xe5\x45\x51\x96\xe6\xca\x4c\xa4\x71\xa2\x44\xd6\x08\x8d\xbc\x5d\x3f\x40\x4b\x58\x58\xda\x2d\xfd\x5a\xba\xd0\xfa\xaa\x81\x96\xdc\x14\xba\xb4\x2e\x7d\x9a\x3a\x76\xdf\xa2\xc8\xb2\x3e\x1c\x4b\xc9\x98\x9a\x55\x0b\x85\x04\x2b\xf1\xd1\xf8\x77\xfe\xf3\x3f\x67\x34\xe3\x47\x9a\x74\xd0\x96\xa0\x47\x3c\x6c\x9d\x3a\xdd\x0b\x3c\xa4\xf0\x36\x90\x5e\x6f\x7f\xeb\xa1\x7c\xa0\xa8\xa0\x6b\x92\x7a\x28\x35\x75\xa5\xa3\xee\x6f\x35\x35\x59\xd2\x65\xd0\xa5\x87\x2d\x19\x90\x61\x60\x4a\xa1\x64\x99\xa0\xa8\xba\x7c\x20\x6b\xf0\x48\x53\xda\x92\x76\x0c\x1f\xc8\xc7\x20\x1d\xe9\x1d\x45\x6d\x6a\x72\x5b\x56\x75\x1e\x3c\x62\xe3\x6e\x2a\x54\xed\xe8\xa0\x1e\xb5\x5a\xf0\xae\xfc\x9e\x74\xd4\xd2\xa1\x24\x94\x79\x40\xae\x0b\x8f\x25\xad\xf9\xbe\xa4\x41\xa9\x26\x94\x57\xc3\xb6\xb7\x79\x30\x88\xe3\x7b\xc4\xb6\xb1\xc7\x10\xbc\x8d\x0c\xdf\x22\xce\x36\x43\x28\xf5\x91\x3f\xa0\xa0\x2b\xea\xb1\xa2\xea\x50\x12\x33\xe2\x4a\x62\xb9\x7c\x5b\x08\xb3\x6f\x39\xac\x3a\x0c\x28\xf6\x1c\xd4\xc7\x0c\x38\x2e\xa2\xf4\x23\xe2\x99\x49\xa8\x28\xe4\xc5\xe2\x3e\xb2\x6c\x96\x40\xd3\xa2\xae\x8d\x86\x5d\x46\x86\x85\x24\xa9\x81\xcb\xa9\xf7\xe3\x7b\x78\x30\x3c\x8c\x7c\xdc\xf5\xad\x3e\x86\x50\xbc\x54\x64\x29\x35\x7c\x79\x7f\x4b\x51\x0f\x65\x4d\x0f\xc2\x3a\x89\x78\x89\x34\x49\xe6\x8b\xbc\x96\xa9\x23\xa8\xa5\xcf\x2c\xc3\x63\xa9\x75\x24\x1f\x42\x49\xe4\x81\x9b\x0f\xca\xf1\xc0\x55\xc4\x4a\xb5\xd2\xab\xec\x35\x50\xad\x81\x6a\xa8\xb1\x5b\x7d\xb0\xb7\x8b\x04\xbc\x8b\x1e\x08\x62\xcf\xa8\x72\x51\xf0\x3b\x62\xbd\xfa\x96\x41\xfa\xc1\x3f\xa6\xd7\xa3\xe9\x67\x9f\x4c\x5e\x7c\x13\xfc\x81\x1d\x74\x62\x63\x93\xe3\x41\xac\xd5\x2b\x55\xa1\x5e\x17\xc4\x4c\x03\x74\x03\x87\xb3\xba\x20\xbc\xe3\xde\x72\x60\x29\x9a\x2c\x3d\x63\x96\xe4\x93\xe2\xc1\x96\x94\x0a\x7e\x6e\x67\xd3\xc7\xce\x80\x35\x0f\x66\x27\x7b\xd8\xf1\xff\xed\xe5\xef\x22\x0f\xf5\xb1\x9f\x1e\xb6\x92\x5b\x47\x96\x41\x9c\xcd\xb5\x14\x1e\x6c\x8b\xfa\x96\x73\xda\x25\x9e\x89\x3d\x38\x6c\x4b\xad\xd6\xfc\x86\x5a\xd6\x0d\x2b\xb3\x1e\xcd\x59\x38\x23\x29\xc1\xe7\x9a\xa6\x25\x4b\x14\x49\x25\x1c\xa6\x93\x14\xd6\x12\xcc\x72\x69\x4d\x7f\x1e\x4f\xc7\xdf\x85\x25\xc2\xf1\x20\xf0\xc0\xd1\x21\xf5\xf1\xbc\x72\xb2\xae\x16\xbf\x22\x0f\xd5\x42\xa0\x2b\x01\xf4\x17\x57\x37\x97\xaf\x63\x68\x71\x09\x30\x6e\x16\x96\x63\xe2\xa7\x11\x72\x0f\x41\x0f\xed\x04\x2d\x29\xbc\x41\x28\x04\xbe\xca\x03\x37\xfb\xf4\xd5\xe4\xf9\x97\x39\xf0\x01\x46\x0e\x7b\x30\xe4\x0e\xb1\x39\x1e\x2a\x45\xe1\xef\xf2\xc0\xdd\xbc\x1e\x4f\x9e\x7d\x1f\x26\xc1\xf1\x50\xcd\xc4\x47\xa6\x99\xf2\x4a\x61\xbc\xb5\xc0\x2b\xbf\x7f\x35\xfb\xe3\xc5\x7f\x83\xb7\xce\x03\xf7\xd7\xe8\xd7\xe9\xb7\xd7\x8b\x52\x74\x3d\x72\x8e\x0d\x9f\xcb\xbd\x4c\xaa\xb1\x18\xe2\x46\x4c\x1c\x1b\xba\x9e\x0b\x9b\x61\xea\x13\xf2\xb4\x48\xfc\x07\x3c\x70\x10\x3a\x3a\xd6\x3d\x9f\x3f\xe5\x92\x98\x7e\x87\xb8\xd8\x29\x32\x85\xbd\xc0\xe3\x97\x3f\xcd\x5e\xfe\x18\xb5\x6f\xd7\x32\xe7\x5d\x2e\xf3\xaa\x68\xc3\x88\x42\xcc\x1b\x3b\x66\x2f\x87\x35\xcb\x2f\x83\xd3\x42\xe9\x83\xd5\xe7\xcf\xf1\x78\xf2\x6c\xb4\x50\xfb\x9c\x9c\x50\x2e\xe3\xb5\x70\x9d\xab\x31\xe9\xe4\xf2\xeb\xd9\xe8\x2a\x80\x09\xe8\x7d\x44\x2f\xb8\xd4\x6b\xce\x4a\x53\x28\x7b\xb0\xce\xcc\xae\x47\x93\xcb\xcf\x63\xad\x33\xd9\xa9\x71\x86\xcd\x81\x8d\x69\xc6\x4a\x89\xec\x62\x73\x08\xd6\x9e\x9b\x57\xcf\x03\xfd\x5f\x5e\x45\xa5\x89\xbd\x27\x0b\x93\x67\x5c\x15\x6e\x99\x7a\x1a\x39\x79\x40\xa9\xe5\xf0\x66\x38\x27\x7e\xb3\xb8\x24\x1a\xf1\x33\x4a\x5a\xfd\xdc\x24\x56\x7a\x7a\x8f\xd8\x26\xf6\x76\x5c\x7b\x40\x93\x3c\x96\x36\x54\x8b\x15\x61\xc3\x7b\x2a\x1b\x51\xbf\xfb\x04\x7b\xd4\x22\x0e\xe8\xf2\x87\xfa\x5d\x3b\xa6\xac\xcd\x79\xf6\x16\x6c\xe0\x9a\x6c\xa1\x39\x59\x76\xcf\x2c\xea\x13\x6f\xc8\x9a\x6d\x74\xdb\xbd\x7b\xc3\x38\x55\xa5\x2d\x6f\x22\xd5\x3c\xfe\x70\xaa\x37\x8e\x1f\x0e\x7b\x7f\xdc\x9b\x98\xaa\x75\x4e\x2a\x36\xbc\xc3\x67\xde\x0f\x7b\xb8\x8f\xbc\x0b\x96\x13\xad\x75\x66\x3c\xdd\x5f\x92\x33\x92\x95\xfe\x12\xf5\x8c\x10\xe2\x8e\x83\xa6\xd9\x2f\x1f\x4f\x7f\xfb\x21\x7d\x60\x24\x84\x3b\x34\x2e\xa3\x0f\xc4\xab\x4f\x37\x58\x8f\x36\xee\xb0\x28\x90\x71\xc6\xa2\x7a\x62\x38\xc3\x60\xb4\xee\x19\xa1\x3e\xcb\x70\xf3\xe7\x35\x06\xab\x84\x71\xcb\xe9\xdc\x65\x83\x75\x0e\x64\x52\x27\x3c\x99\x81\x2b\x73\xb7\x56\x57\x40\xb6\x85\x28\x03\x0c\xa3\x62\xff\xe4\xcc\x38\x33\x0a\x0d\xfc\x33\x86\x1a\x64\x2e\xd6\x37\xd1\xb4\x42\x3b\x6c\xbc\x6a\x58\xed\xb5\x46\xb9\x6c\x5c\xb5\xdb\x52\xac\xd3\x3e\xfc\xa1\x8b\x19\x58\xfe\xef\x32\x6c\x36\x38\x27\x27\xc1\x98\x4c\x2e\xf0\x7c\xa6\x8a\xc0\x8e\xc9\x14\xc7\xde\xb9\xb6\x9a\x9d\x76\x5b\xd1\x97\xbf\xbb\xcb\xf9\xa6\xcf\xd9\xdf\xfa\x3b\x00\x00\xff\xff\x89\x61\x1b\xe4\x04\x1c\x00\x00")

func saSqlBytes() ([]byte, error) {
	return bindataRead(
		_saSql,
		"sa.sql",
	)
}

func saSql() (*asset, error) {
	bytes, err := saSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sa.sql", size: 7172, mode: os.FileMode(420), modTime: time.Unix(1562309716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sa.sql": saSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sa.sql": &bintree{saSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

